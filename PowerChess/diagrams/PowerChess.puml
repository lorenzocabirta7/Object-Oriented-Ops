@startuml
'https://plantuml.com/class-diagram

interface EstadoPieza{
    + verificarMovimiento(xDestino: int, yDestino: int): boolean
}

class Peon implements EstadoPieza{
    + verificarMovimiento(xDestino: int, yDestino: int): boolean
}

class Torre implements EstadoPieza{
    + verificarMovimiento(xDestino: int, yDestino: int): boolean
}

class Caballo implements EstadoPieza{
    + verificarMovimiento(xDestino: int, yDestino: int): boolean
}

class Alfil implements EstadoPieza{
    + verificarMovimiento(xDestino: int, yDestino: int): boolean
}

class Reina implements EstadoPieza{
    + verificarMovimiento(xDestino: int, yDestino: int): boolean
}

class Rey implements EstadoPieza{
    + verificarMovimiento(xDestino: int, yDestino: int): boolean
}

interface Color{
}

class Blanco implements Color{}

class Negro implements Color{}


class Pieza{
    - x: int
    - y: int
    - poderAplicado: Poder
    - color: Color
    + mover(xDestino: int, yDestino: int)
    + cambiarEstado(nuevoEstado: EstadoPieza)
    + aplicarPoder(poder: Poder)
}

Pieza --> EstadoPieza

class Tablero{
    - cuadricula: Pieza[][]
    - inicializarPiezas()
    - inicializarPiezasEspeciales(fila: int, color: Color)
    - posicionDentroDelTablero(x: int, y: int): boolean

    + moverPieza(pieza: Pieza, xDestino: int, yDestino: int)
    + casillaVacia(x: int, y: int)
    + hayPiezaEnemiga(x: int, y: int, color: Color)
    + hayObstaculosEntre(xOrigen: int, yOrigen: int, xDestino: int, yDestino: int)
    + obtenerPieza(x: int, y: int): Pieza
}

Jugador ..> Tablero


Tablero *-- Pieza

class Jugador{
    - color: Color
    -poderes: Poder
    + moverPieza(unaPieza: Pieza, xDestino: int, yDestino: int)
}

class Partida{
    + iniciar()
    + terminar()
}

interface Poder{
    + activar(pieza: Pieza)
}

abstract class PoderDeDuracion implements Poder {
    + activar(pieza: Pieza)
}

abstract class PoderDeAccion implements Poder {
    + activar(pieza: Pieza))
}


class Freeze implements PoderDeDuracion{
    - duracion: int
    + activar(pieza: Pieza)
}

class Escudo implements PoderDeDuracion{
    - duracion: int
    + activar(pieza: Pieza)
}

class DobleJuego implements PoderDeAccion{
    + activar(pieza: Pieza)
}

class Vuelo implements PoderDeAccion{
    + activar(pieza: Pieza)
}

class RobarPoder implements PoderDeAccion{
    + activar(pieza: Pieza)
}

class Limpieza implements PoderDeAccion{
    + activar(pieza: Pieza)
}

class Evolucion implements Poder{
    + activar()
}

class Controlador{}

class Vista{}

class Jugador{
    - color: Color
    - nombre: String
    - poderes: List<Poder>
    + moverPieza(unaPieza: Pieza, xDestino: int, yDestino: int, tablero: Tablero)
    + activarPoder(poder: Poder, pieza: Pieza)
    + ofrecerTablas()
    + rendirse()
    + agregarPoder(poder: Poder)
    + removerPoder(poder: Poder)
    + ofrecerTablas(juego: Juego)
    + responderTablas(juego: Juego, acepta: boolean)
    + rendirse(juego: Juego)
}


@enduml