@startuml
'https://plantuml.com/class-diagram

interface EstadoPieza{
    + verificarMovimiento(xOrigen: int, yOrigen: int, xDestino: int, yDestino: int, tablero: Tablero): boolean
    + esPeon(): boolean
    + esRey(): boolean
    + esTorre(): boolean
}

class Peon implements EstadoPieza{
    - nombre: string
    + verificarMovimiento(xOrigen: int, yOrigen: int, xDestino: int, yDestino: int, tablero: Tablero): boolean
    + esPeon(): boolean
}

class Torre implements EstadoPieza{
    - nombre: string
    + verificarMovimiento(xOrigen: int, yOrigen: int, xDestino: int, yDestino: int, tablero: Tablero): boolean
    + esTorre(): boolean
}

class Caballo implements EstadoPieza{
    - nombre: string
    + verificarMovimiento(xOrigen: int, yOrigen: int, xDestino: int, yDestino: int, tablero: Tablero): boolean
}

class Alfil implements EstadoPieza{
    - nombre: string
    + verificarMovimiento(xOrigen: int, yOrigen: int, xDestino: int, yDestino: int, tablero: Tablero): boolean
}

class Reina implements EstadoPieza{
    - nombre: string
    - torre: EstadoPieza
    - alfil: EstadoPieza
    + verificarMovimiento(xOrigen: int, yOrigen: int, xDestino: int, yDestino: int, tablero: Tablero): boolean
}

class Rey implements EstadoPieza{
    - nombre: string
    + verificarMovimiento(xOrigen: int, yOrigen: int, xDestino: int, yDestino: int, tablero: Tablero): boolean
    + esRey(): boolean
}

enum Color {
    BLANCO
    NEGRO
}

class Pieza{
    - x: int
    - y: int
    - fueMovida: boolean
    - congelada: boolean
    - escudada: boolean
    + mover(xOrigen: int, yOrigen: int, xDestino: int, yDestino: int, tablero: Tablero)
    + haSidoMovido(): boolean
    + puedeCoronar(yActual: int): boolean
    + coronar(nuevoEstado: EstadoPieza)
    + esPeon(): boolean
    + esRey(): boolean
    + esTorre(): boolean
}

class Tablero{
    - tamanio: int
    - casillaSeleccionada: Pair
    - inicializarPiezas()
    - inicializarPiezasEspeciales(fila: int, color: Color)
    - posicionDentroDelTablero(x: int, y: int): boolean
    - piezaEnemigaEscudada(xDestino: int, yDestino: int): boolean
    + moverPieza(xOrigen: int, yOrigen: int, xDestino: int, yDestino: int, color: Color): boolean
    + casillaVacia(x: int, y: int): boolean
    + casillaEstaSeleccionada(coordenadas: Pair<Integer, Integer>): boolean
    + cambiarSeleccionCasilla(coordenadas: Pair<Integer, Integer>)
    + hayUnaCasillaSeleccionada(): boolean
    + obtenerCasillaSeleccionada(): Pair<Integer, Integer>
    + hayPiezaEnemiga(x: int, y: int, color: Color)
    + hayObstaculosEntre(xOrigen: int, yOrigen: int, xDestino: int, yDestino: int): boolean
    + encontrarRey(color: Color): Pieza
    + estaEnJaque(jugador: Jugador): boolean
    + esJaqueMate(jugador: Jugador): boolean
    + puedeHacerEnroque(jugador: Jugador, enroqueCorto: boolean): boolean
    + hacerEnroque(jugador: Jugador, enroqueCorto: boolean): boolean
    + obtenerPieza(x: int, y: int): Pieza
    + obtenerPosicion(pieza: Pieza, obtenerX: boolean): int
    + simularMovimientoYVerificarJaque(pieza: Pieza, xDestino: int, yDestino: int, jugador: Jugador): boolean
}

Jugador "2"..>"1" Tablero

Jugador "1"-->"1" Color

Pieza "1"-->"1" Color

Tablero "1"*--"1..32" Pieza

Pieza "1"*--"1" EstadoPieza

Jugador "1"-->"0..7" Poder

Juego "1"*--"2" Jugador
Juego "1"*--"1" Tablero

class Jugador{
    -poderes: Poder
    + moverPieza(unaPieza: Pieza, xDestino: int, yDestino: int)
}


interface Poder{
    + activar(pieza: Pieza)
}

abstract class PoderDeDuracion implements Poder {
    + activar(pieza: Pieza)
    + disminuirTurnos()
    + desactivar(pieza: Pieza)
}

abstract class PoderDeAccion implements Poder {
    + activar(pieza: Pieza)
}


class Freeze extends PoderDeDuracion{
    - duracion: int
    + activar(pieza: Pieza)
    + desactivar(pieza: Pieza)
}

class Escudo extends PoderDeDuracion{
    - duracion: int
    + activar(pieza: Pieza)
    + desactivar(pieza: Pieza)
}

class DobleJuego extends PoderDeAccion{
    + activar(pieza: Pieza)
}

class Vuelo extends PoderDeAccion{
    + activar(pieza: Pieza)
}

class RobarPoder extends PoderDeAccion{
    + activar(pieza: Pieza)
}

class Limpieza extends PoderDeAccion{
    + activar(pieza: Pieza)
}

class Evolucion implements Poder{
    + activar()
}

class Jugador{
    - nombre: String
    + moverPieza(xOrigen: int, yOrigen: int, xDestino: int, yDestino: int, tablero: Tablero)
    + activarPoder(poder: Poder, pieza: Pieza)
    + desactivarPoder(poder: PoderDeDuracion, pieza: Pieza)
    + agregarPoder(poder: Poder)
    + removerPoder(poder: Poder)
    + actualizarPoderesDeDuracion()
}

class Juego{
    - enJuego: boolean
    - tablasOfrecidas: boolean
    + moverPieza(xOrigen: int, yOrigen: int, xDestino: int, yDestino: int): boolean
    + ofrecerTablas()
    + responderTablas( acepta: boolean)
    + rendirse()
    + terminarPartida(ganador: Jugador)
    + cambiarTurno()
    + obtenerColorDelJugadorActual(): Color
}

@enduml
